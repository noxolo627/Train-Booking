/**
 * NOTE: This class is auto generated by the swagger code generator program (unset).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.annotations.*;
import io.swagger.model.Admin;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2023-07-20T12:56:46.917+02:00")

@Validated
@Api(value = "admin", description = "the admin API")
@RequestMapping(value = "")
public interface AdminApi {

    @ApiOperation(value = "Add a new admin", nickname = "addAdmin", notes = "", tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Admin created successfully") })
    @RequestMapping(value = "/admin/admin",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ApiResponseMessage> addAdmin(@ApiParam(value = "Admin object" ,required=true )  @Valid @RequestBody Admin admin);


    @ApiOperation(value = "Delete an admin", nickname = "deleteAdmin", notes = "", tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Admin deleted successfully"),
        @ApiResponse(code = 400, message = "Invalid request data"),
        @ApiResponse(code = 404, message = "Admin not found") })
    @RequestMapping(value = "/admin/admin/{adminId}",
        method = RequestMethod.DELETE)
    ResponseEntity<ApiResponseMessage> deleteAdmin(@ApiParam(value = "ID of the admin to delete",required=true) @PathVariable("adminId") Integer adminId);


    @ApiOperation(value = "Get all admins", nickname = "getAdmins", notes = "", response = Admin.class, responseContainer = "List", tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Admin.class, responseContainer = "List") })
    @RequestMapping(value = "/admin/admins",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ApiResponseMessage> getAdmins();


    @ApiOperation(value = "Update an admin", nickname = "updateAdmin", notes = "", tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Admin updated successfully"),
        @ApiResponse(code = 400, message = "Invalid request data"),
        @ApiResponse(code = 404, message = "Admin not found") })
    @RequestMapping(value = "/admin/admin/{adminId}",
        method = RequestMethod.PUT)
    ResponseEntity<ApiResponseMessage> updateAdmin(@ApiParam(value = "ID of the admin to update",required=true) @PathVariable("adminId") Integer adminId,@ApiParam(value = "Updated admin object" ,required=true )  @Valid @RequestBody Admin admin);

}
